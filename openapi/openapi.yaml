openapi: 3.0.0
info:
  title: EC Site API
  description: |-
    EC Site API

    Sample e-commerce API built with TypeSpec
  version: 0.0.0
tags:
  - name: Products
  - name: Categories
  - name: Users
  - name: Carts
  - name: Orders
paths:
  /carts/users/{userId}:
    get:
      operationId: CartsService_getByUser
      description: Get cart by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CartSummary'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Carts
  /carts/users/{userId}/items:
    post:
      operationId: CartsService_addItem
      description: Add item to cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CartSummary'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AddCartItemRequest'
    delete:
      operationId: CartsService_clear
      description: Clear all items from cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Carts
  /carts/users/{userId}/items/{productId}:
    patch:
      operationId: CartsService_updateItem
      description: Update cart item quantity
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CartSummary'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Carts
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCartItemRequest'
    delete:
      operationId: CartsService_removeItem
      description: Remove item from cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/CartSummary'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Carts
  /categories:
    get:
      operationId: CategoriesService_list
      description: List all categories
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Categories
    post:
      operationId: CategoriesService_create
      description: Create a new category
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCategoryRequest'
  /categories/tree:
    get:
      operationId: CategoriesService_tree
      description: Get category tree (with nested children)
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: array
                    items:
                      $ref: '#/components/schemas/CategoryTree'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Categories
  /categories/{categoryId}:
    get:
      operationId: CategoriesService_get
      description: Get a category by ID
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Categories
    patch:
      operationId: CategoriesService_update
      description: Update a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Category'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Categories
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCategoryRequest'
    delete:
      operationId: CategoriesService_delete
      description: Delete a category
      parameters:
        - name: categoryId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Categories
  /orders:
    get:
      operationId: OrdersService_list
      description: List all orders with optional filtering
      parameters:
        - $ref: '#/components/parameters/PaginationParams.limit'
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/OrderSearchParams.status'
        - $ref: '#/components/parameters/OrderSearchParams.userId'
        - $ref: '#/components/parameters/OrderSearchParams.startDate'
        - $ref: '#/components/parameters/OrderSearchParams.endDate'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - items
                      - total
                      - limit
                      - offset
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      total:
                        type: integer
                        format: int32
                      limit:
                        type: integer
                        format: int32
                      offset:
                        type: integer
                        format: int32
                    description: Paginated response wrapper
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
  /orders/cancel/{orderId}:
    post:
      operationId: OrdersService_cancel
      description: Cancel an order
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Order'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
  /orders/status/{orderId}:
    patch:
      operationId: OrdersService_updateStatus
      description: Update order status
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Order'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrderStatusRequest'
  /orders/users/{userId}:
    post:
      operationId: OrdersService_create
      description: Create a new order from user's cart
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Order'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrderRequest'
    get:
      operationId: OrdersService_listByUser
      description: Get orders by user ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
        - $ref: '#/components/parameters/PaginationParams.limit'
        - $ref: '#/components/parameters/PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - items
                      - total
                      - limit
                      - offset
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Order'
                      total:
                        type: integer
                        format: int32
                      limit:
                        type: integer
                        format: int32
                      offset:
                        type: integer
                        format: int32
                    description: Paginated response wrapper
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
  /orders/{orderId}:
    get:
      operationId: OrdersService_get
      description: Get an order by ID
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Order'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Orders
  /products:
    get:
      operationId: ProductsService_list
      description: List all products with optional filtering
      parameters:
        - $ref: '#/components/parameters/PaginationParams.limit'
        - $ref: '#/components/parameters/PaginationParams.offset'
        - $ref: '#/components/parameters/ProductSearchParams.name'
        - $ref: '#/components/parameters/ProductSearchParams.categoryId'
        - $ref: '#/components/parameters/ProductSearchParams.minPrice'
        - $ref: '#/components/parameters/ProductSearchParams.maxPrice'
        - $ref: '#/components/parameters/ProductSearchParams.sortBy'
        - $ref: '#/components/parameters/ProductSearchParams.order'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - type: object
                    required:
                      - items
                      - total
                      - limit
                      - offset
                    properties:
                      items:
                        type: array
                        items:
                          $ref: '#/components/schemas/Product'
                      total:
                        type: integer
                        format: int32
                      limit:
                        type: integer
                        format: int32
                      offset:
                        type: integer
                        format: int32
                    description: Paginated response wrapper
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Products
    post:
      operationId: ProductsService_create
      description: Create a new product
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Product'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateProductRequest'
  /products/{productId}:
    get:
      operationId: ProductsService_get
      description: Get a product by ID
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Product'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Products
    patch:
      operationId: ProductsService_update
      description: Update a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/Product'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Products
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateProductRequest'
    delete:
      operationId: ProductsService_delete
      description: Delete a product
      parameters:
        - name: productId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Products
  /users:
    get:
      operationId: UsersService_list
      description: List all users
      parameters:
        - $ref: '#/components/parameters/PaginationParams.limit'
        - $ref: '#/components/parameters/PaginationParams.offset'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                type: object
                required:
                  - items
                  - total
                  - limit
                  - offset
                properties:
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  total:
                    type: integer
                    format: int32
                  limit:
                    type: integer
                    format: int32
                  offset:
                    type: integer
                    format: int32
                description: Paginated response wrapper
      tags:
        - Users
    post:
      operationId: UsersService_create
      description: Create a new user
      parameters: []
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
  /users/{userId}:
    get:
      operationId: UsersService_get
      description: Get a user by ID
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
    patch:
      operationId: UsersService_update
      description: Update a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                anyOf:
                  - $ref: '#/components/schemas/User'
                  - $ref: '#/components/schemas/ErrorResponse'
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
    delete:
      operationId: UsersService_delete
      description: Delete a user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/uuid'
      responses:
        '200':
          description: The request has succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        '204':
          description: 'There is no content to send for this request, but the headers may be useful. '
      tags:
        - Users
components:
  parameters:
    OrderSearchParams.endDate:
      name: endDate
      in: query
      required: false
      description: End date for order creation
      schema:
        type: string
        format: date-time
      explode: false
    OrderSearchParams.startDate:
      name: startDate
      in: query
      required: false
      description: Start date for order creation
      schema:
        type: string
        format: date-time
      explode: false
    OrderSearchParams.status:
      name: status
      in: query
      required: false
      description: Filter by order status
      schema:
        $ref: '#/components/schemas/OrderStatus'
      explode: false
    OrderSearchParams.userId:
      name: userId
      in: query
      required: false
      description: Filter by user ID
      schema:
        $ref: '#/components/schemas/uuid'
      explode: false
    PaginationParams.limit:
      name: limit
      in: query
      required: false
      description: Maximum number of items to return
      schema:
        type: integer
        format: int32
        default: 20
      explode: false
    PaginationParams.offset:
      name: offset
      in: query
      required: false
      description: Number of items to skip
      schema:
        type: integer
        format: int32
        default: 0
      explode: false
    ProductSearchParams.categoryId:
      name: categoryId
      in: query
      required: false
      description: Filter by category ID
      schema:
        $ref: '#/components/schemas/uuid'
      explode: false
    ProductSearchParams.maxPrice:
      name: maxPrice
      in: query
      required: false
      description: Maximum price
      schema:
        type: number
        format: float
      explode: false
    ProductSearchParams.minPrice:
      name: minPrice
      in: query
      required: false
      description: Minimum price
      schema:
        type: number
        format: float
      explode: false
    ProductSearchParams.name:
      name: name
      in: query
      required: false
      description: Search by product name
      schema:
        type: string
      explode: false
    ProductSearchParams.order:
      name: order
      in: query
      required: false
      description: Sort order
      schema:
        type: string
        enum:
          - asc
          - desc
        default: desc
      explode: false
    ProductSearchParams.sortBy:
      name: sortBy
      in: query
      required: false
      description: Sort field
      schema:
        type: string
        enum:
          - name
          - price
          - createdAt
        default: createdAt
      explode: false
  schemas:
    AddCartItemRequest:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          $ref: '#/components/schemas/uuid'
        quantity:
          type: integer
          format: int32
      description: Add item to cart request
    Address:
      type: object
      required:
        - street
        - city
        - state
        - postalCode
        - country
      properties:
        street:
          type: string
        city:
          type: string
        state:
          type: string
        postalCode:
          type: string
        country:
          type: string
      description: User address
    Cart:
      type: object
      required:
        - id
        - userId
        - items
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        userId:
          $ref: '#/components/schemas/uuid'
        items:
          type: array
          items:
            $ref: '#/components/schemas/CartItem'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: Shopping cart
    CartItem:
      type: object
      required:
        - productId
        - quantity
      properties:
        productId:
          $ref: '#/components/schemas/uuid'
        quantity:
          type: integer
          format: int32
        product:
          $ref: '#/components/schemas/Product'
      description: Cart item
    CartSummary:
      type: object
      required:
        - totalAmount
        - totalItems
      properties:
        totalAmount:
          type: number
          format: float
        totalItems:
          type: integer
          format: int32
      allOf:
        - $ref: '#/components/schemas/Cart'
      description: Cart summary with calculated totals
    Category:
      type: object
      required:
        - id
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
        parentId:
          $ref: '#/components/schemas/uuid'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: Category model
    CategoryTree:
      type: object
      required:
        - children
      properties:
        children:
          type: array
          items:
            $ref: '#/components/schemas/CategoryTree'
      allOf:
        - $ref: '#/components/schemas/Category'
      description: Category with nested children
    CreateCategoryRequest:
      type: object
      required:
        - name
      properties:
        name:
          type: string
        parentId:
          $ref: '#/components/schemas/uuid'
      description: Category creation request
    CreateOrderRequest:
      type: object
      required:
        - items
        - shippingAddress
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        shippingAddress:
          $ref: '#/components/schemas/Address'
      description: Create order request
    CreateProductRequest:
      type: object
      required:
        - name
        - description
        - price
        - stock
        - categoryId
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          format: int32
        categoryId:
          $ref: '#/components/schemas/uuid'
        imageUrls:
          type: array
          items:
            type: string
      description: Product creation request
    CreateUserRequest:
      type: object
      required:
        - email
        - name
      properties:
        email:
          type: string
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
      description: User creation request
    ErrorResponse:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            message:
              type: string
          required:
            - code
            - message
      description: Common error response
    Order:
      type: object
      required:
        - id
        - userId
        - items
        - totalAmount
        - status
        - shippingAddress
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        userId:
          $ref: '#/components/schemas/uuid'
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        totalAmount:
          type: number
          format: float
        status:
          $ref: '#/components/schemas/OrderStatus'
        shippingAddress:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: Order model
    OrderItem:
      type: object
      required:
        - productId
        - quantity
        - price
        - productName
      properties:
        productId:
          $ref: '#/components/schemas/uuid'
        quantity:
          type: integer
          format: int32
        price:
          type: number
          format: float
        productName:
          type: string
      description: Order item
    OrderStatus:
      type: string
      enum:
        - pending
        - processing
        - shipped
        - delivered
        - cancelled
      description: Order status enum
    Product:
      type: object
      required:
        - id
        - name
        - description
        - price
        - stock
        - categoryId
        - imageUrls
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          format: int32
        categoryId:
          $ref: '#/components/schemas/uuid'
        imageUrls:
          type: array
          items:
            type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: Product model
    UpdateCartItemRequest:
      type: object
      required:
        - quantity
      properties:
        quantity:
          type: integer
          format: int32
      description: Update cart item request
    UpdateCategoryRequest:
      type: object
      properties:
        name:
          type: string
        parentId:
          $ref: '#/components/schemas/uuid'
      description: Category update request
    UpdateOrderStatusRequest:
      type: object
      required:
        - status
      properties:
        status:
          $ref: '#/components/schemas/OrderStatus'
      description: Update order status request
    UpdateProductRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        price:
          type: number
          format: float
        stock:
          type: integer
          format: int32
        categoryId:
          $ref: '#/components/schemas/uuid'
        imageUrls:
          type: array
          items:
            type: string
      description: Product update request
    UpdateUserRequest:
      type: object
      properties:
        email:
          type: string
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
      description: User update request
    User:
      type: object
      required:
        - id
        - email
        - name
        - createdAt
        - updatedAt
      properties:
        id:
          $ref: '#/components/schemas/uuid'
        email:
          type: string
        name:
          type: string
        address:
          $ref: '#/components/schemas/Address'
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      description: User model
    uuid:
      type: string
      description: UUID type alias
servers:
  - url: http://localhost:3000
    description: Development server
    variables: {}
