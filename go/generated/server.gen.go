//go:build go1.22

// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

// Defines values for OrderStatus.
const (
	Cancelled  OrderStatus = "cancelled"
	Delivered  OrderStatus = "delivered"
	Pending    OrderStatus = "pending"
	Processing OrderStatus = "processing"
	Shipped    OrderStatus = "shipped"
)

// Defines values for ProductSearchParamsOrder.
const (
	ProductSearchParamsOrderAsc  ProductSearchParamsOrder = "asc"
	ProductSearchParamsOrderDesc ProductSearchParamsOrder = "desc"
)

// Defines values for ProductSearchParamsSortBy.
const (
	ProductSearchParamsSortByCreatedAt ProductSearchParamsSortBy = "createdAt"
	ProductSearchParamsSortByName      ProductSearchParamsSortBy = "name"
	ProductSearchParamsSortByPrice     ProductSearchParamsSortBy = "price"
)

// Defines values for ProductsServiceListParamsSortBy.
const (
	ProductsServiceListParamsSortByCreatedAt ProductsServiceListParamsSortBy = "createdAt"
	ProductsServiceListParamsSortByName      ProductsServiceListParamsSortBy = "name"
	ProductsServiceListParamsSortByPrice     ProductsServiceListParamsSortBy = "price"
)

// Defines values for ProductsServiceListParamsOrder.
const (
	ProductsServiceListParamsOrderAsc  ProductsServiceListParamsOrder = "asc"
	ProductsServiceListParamsOrderDesc ProductsServiceListParamsOrder = "desc"
)

// AddCartItemRequest Add item to cart request
type AddCartItemRequest struct {
	// ProductId UUID type alias
	ProductId Uuid  `json:"productId"`
	Quantity  int32 `json:"quantity"`
}

// Address User address
type Address struct {
	City       string `json:"city"`
	Country    string `json:"country"`
	PostalCode string `json:"postalCode"`
	State      string `json:"state"`
	Street     string `json:"street"`
}

// Cart Shopping cart
type Cart struct {
	CreatedAt time.Time `json:"createdAt"`

	// Id UUID type alias
	Id        Uuid       `json:"id"`
	Items     []CartItem `json:"items"`
	UpdatedAt time.Time  `json:"updatedAt"`

	// UserId UUID type alias
	UserId Uuid `json:"userId"`
}

// CartItem Cart item
type CartItem struct {
	// Product Product model
	Product *Product `json:"product,omitempty"`

	// ProductId UUID type alias
	ProductId Uuid  `json:"productId"`
	Quantity  int32 `json:"quantity"`
}

// CartSummary Shopping cart
type CartSummary = Cart

// Category Category model
type Category struct {
	CreatedAt time.Time `json:"createdAt"`

	// Id UUID type alias
	Id   Uuid   `json:"id"`
	Name string `json:"name"`

	// ParentId UUID type alias
	ParentId  *Uuid     `json:"parentId,omitempty"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// CategoryTree Category model
type CategoryTree = Category

// CreateCategoryRequest Category creation request
type CreateCategoryRequest struct {
	Name string `json:"name"`

	// ParentId UUID type alias
	ParentId *Uuid `json:"parentId,omitempty"`
}

// CreateOrderRequest Create order request
type CreateOrderRequest struct {
	Items []OrderItem `json:"items"`

	// ShippingAddress User address
	ShippingAddress Address `json:"shippingAddress"`
}

// CreateProductRequest Product creation request
type CreateProductRequest struct {
	// CategoryId UUID type alias
	CategoryId  Uuid      `json:"categoryId"`
	Description string    `json:"description"`
	ImageUrls   *[]string `json:"imageUrls,omitempty"`
	Name        string    `json:"name"`
	Price       float32   `json:"price"`
	Stock       int32     `json:"stock"`
}

// CreateUserRequest User creation request
type CreateUserRequest struct {
	// Address User address
	Address *Address `json:"address,omitempty"`
	Email   string   `json:"email"`
	Name    string   `json:"name"`
}

// ErrorResponse Common error response
type ErrorResponse struct {
	Error struct {
		Code    string `json:"code"`
		Message string `json:"message"`
	} `json:"error"`
}

// Order Order model
type Order struct {
	CreatedAt time.Time `json:"createdAt"`

	// Id UUID type alias
	Id    Uuid        `json:"id"`
	Items []OrderItem `json:"items"`

	// ShippingAddress User address
	ShippingAddress Address `json:"shippingAddress"`

	// Status Order status enum
	Status      OrderStatus `json:"status"`
	TotalAmount float32     `json:"totalAmount"`
	UpdatedAt   time.Time   `json:"updatedAt"`

	// UserId UUID type alias
	UserId Uuid `json:"userId"`
}

// OrderItem Order item
type OrderItem struct {
	Price float32 `json:"price"`

	// ProductId UUID type alias
	ProductId   Uuid   `json:"productId"`
	ProductName string `json:"productName"`
	Quantity    int32  `json:"quantity"`
}

// OrderStatus Order status enum
type OrderStatus string

// Product Product model
type Product struct {
	// CategoryId UUID type alias
	CategoryId  Uuid      `json:"categoryId"`
	CreatedAt   time.Time `json:"createdAt"`
	Description string    `json:"description"`

	// Id UUID type alias
	Id        Uuid      `json:"id"`
	ImageUrls []string  `json:"imageUrls"`
	Name      string    `json:"name"`
	Price     float32   `json:"price"`
	Stock     int32     `json:"stock"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// UpdateCartItemRequest Update cart item request
type UpdateCartItemRequest struct {
	Quantity int32 `json:"quantity"`
}

// UpdateCategoryRequest Category update request
type UpdateCategoryRequest struct {
	Name *string `json:"name,omitempty"`

	// ParentId UUID type alias
	ParentId *Uuid `json:"parentId,omitempty"`
}

// UpdateOrderStatusRequest Update order status request
type UpdateOrderStatusRequest struct {
	// Status Order status enum
	Status OrderStatus `json:"status"`
}

// UpdateProductRequest Product update request
type UpdateProductRequest struct {
	// CategoryId UUID type alias
	CategoryId  *Uuid     `json:"categoryId,omitempty"`
	Description *string   `json:"description,omitempty"`
	ImageUrls   *[]string `json:"imageUrls,omitempty"`
	Name        *string   `json:"name,omitempty"`
	Price       *float32  `json:"price,omitempty"`
	Stock       *int32    `json:"stock,omitempty"`
}

// UpdateUserRequest User update request
type UpdateUserRequest struct {
	// Address User address
	Address *Address `json:"address,omitempty"`
	Email   *string  `json:"email,omitempty"`
	Name    *string  `json:"name,omitempty"`
}

// User User model
type User struct {
	// Address User address
	Address   *Address  `json:"address,omitempty"`
	CreatedAt time.Time `json:"createdAt"`
	Email     string    `json:"email"`

	// Id UUID type alias
	Id        Uuid      `json:"id"`
	Name      string    `json:"name"`
	UpdatedAt time.Time `json:"updatedAt"`
}

// Uuid UUID type alias
type Uuid = string

// OrderSearchParamsEndDate defines model for OrderSearchParams.endDate.
type OrderSearchParamsEndDate = time.Time

// OrderSearchParamsStartDate defines model for OrderSearchParams.startDate.
type OrderSearchParamsStartDate = time.Time

// OrderSearchParamsStatus Order status enum
type OrderSearchParamsStatus = OrderStatus

// OrderSearchParamsUserId UUID type alias
type OrderSearchParamsUserId = Uuid

// PaginationParamsLimit defines model for PaginationParams.limit.
type PaginationParamsLimit = int32

// PaginationParamsOffset defines model for PaginationParams.offset.
type PaginationParamsOffset = int32

// ProductSearchParamsCategoryId UUID type alias
type ProductSearchParamsCategoryId = Uuid

// ProductSearchParamsMaxPrice defines model for ProductSearchParams.maxPrice.
type ProductSearchParamsMaxPrice = float32

// ProductSearchParamsMinPrice defines model for ProductSearchParams.minPrice.
type ProductSearchParamsMinPrice = float32

// ProductSearchParamsName defines model for ProductSearchParams.name.
type ProductSearchParamsName = string

// ProductSearchParamsOrder defines model for ProductSearchParams.order.
type ProductSearchParamsOrder string

// ProductSearchParamsSortBy defines model for ProductSearchParams.sortBy.
type ProductSearchParamsSortBy string

// OrdersServiceListParams defines parameters for OrdersServiceList.
type OrdersServiceListParams struct {
	// Limit Maximum number of items to return
	Limit *PaginationParamsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PaginationParamsOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Status Filter by order status
	Status *OrderSearchParamsStatus `form:"status,omitempty" json:"status,omitempty"`

	// UserId Filter by user ID
	UserId *OrderSearchParamsUserId `form:"userId,omitempty" json:"userId,omitempty"`

	// StartDate Start date for order creation
	StartDate *OrderSearchParamsStartDate `form:"startDate,omitempty" json:"startDate,omitempty"`

	// EndDate End date for order creation
	EndDate *OrderSearchParamsEndDate `form:"endDate,omitempty" json:"endDate,omitempty"`
}

// OrdersServiceListByUserParams defines parameters for OrdersServiceListByUser.
type OrdersServiceListByUserParams struct {
	// Limit Maximum number of items to return
	Limit *PaginationParamsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PaginationParamsOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// ProductsServiceListParams defines parameters for ProductsServiceList.
type ProductsServiceListParams struct {
	// Limit Maximum number of items to return
	Limit *PaginationParamsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PaginationParamsOffset `form:"offset,omitempty" json:"offset,omitempty"`

	// Name Search by product name
	Name *ProductSearchParamsName `form:"name,omitempty" json:"name,omitempty"`

	// CategoryId Filter by category ID
	CategoryId *ProductSearchParamsCategoryId `form:"categoryId,omitempty" json:"categoryId,omitempty"`

	// MinPrice Minimum price
	MinPrice *ProductSearchParamsMinPrice `form:"minPrice,omitempty" json:"minPrice,omitempty"`

	// MaxPrice Maximum price
	MaxPrice *ProductSearchParamsMaxPrice `form:"maxPrice,omitempty" json:"maxPrice,omitempty"`

	// SortBy Sort field
	SortBy *ProductsServiceListParamsSortBy `form:"sortBy,omitempty" json:"sortBy,omitempty"`

	// Order Sort order
	Order *ProductsServiceListParamsOrder `form:"order,omitempty" json:"order,omitempty"`
}

// ProductsServiceListParamsSortBy defines parameters for ProductsServiceList.
type ProductsServiceListParamsSortBy string

// ProductsServiceListParamsOrder defines parameters for ProductsServiceList.
type ProductsServiceListParamsOrder string

// UsersServiceListParams defines parameters for UsersServiceList.
type UsersServiceListParams struct {
	// Limit Maximum number of items to return
	Limit *PaginationParamsLimit `form:"limit,omitempty" json:"limit,omitempty"`

	// Offset Number of items to skip
	Offset *PaginationParamsOffset `form:"offset,omitempty" json:"offset,omitempty"`
}

// CartsServiceAddItemJSONRequestBody defines body for CartsServiceAddItem for application/json ContentType.
type CartsServiceAddItemJSONRequestBody = AddCartItemRequest

// CartsServiceUpdateItemJSONRequestBody defines body for CartsServiceUpdateItem for application/json ContentType.
type CartsServiceUpdateItemJSONRequestBody = UpdateCartItemRequest

// CategoriesServiceCreateJSONRequestBody defines body for CategoriesServiceCreate for application/json ContentType.
type CategoriesServiceCreateJSONRequestBody = CreateCategoryRequest

// CategoriesServiceUpdateJSONRequestBody defines body for CategoriesServiceUpdate for application/json ContentType.
type CategoriesServiceUpdateJSONRequestBody = UpdateCategoryRequest

// OrdersServiceUpdateStatusJSONRequestBody defines body for OrdersServiceUpdateStatus for application/json ContentType.
type OrdersServiceUpdateStatusJSONRequestBody = UpdateOrderStatusRequest

// OrdersServiceCreateJSONRequestBody defines body for OrdersServiceCreate for application/json ContentType.
type OrdersServiceCreateJSONRequestBody = CreateOrderRequest

// ProductsServiceCreateJSONRequestBody defines body for ProductsServiceCreate for application/json ContentType.
type ProductsServiceCreateJSONRequestBody = CreateProductRequest

// ProductsServiceUpdateJSONRequestBody defines body for ProductsServiceUpdate for application/json ContentType.
type ProductsServiceUpdateJSONRequestBody = UpdateProductRequest

// UsersServiceCreateJSONRequestBody defines body for UsersServiceCreate for application/json ContentType.
type UsersServiceCreateJSONRequestBody = CreateUserRequest

// UsersServiceUpdateJSONRequestBody defines body for UsersServiceUpdate for application/json ContentType.
type UsersServiceUpdateJSONRequestBody = UpdateUserRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (GET /carts/users/{userId})
	CartsServiceGetByUser(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (DELETE /carts/users/{userId}/items)
	CartsServiceClear(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (POST /carts/users/{userId}/items)
	CartsServiceAddItem(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (DELETE /carts/users/{userId}/items/{productId})
	CartsServiceRemoveItem(w http.ResponseWriter, r *http.Request, userId Uuid, productId Uuid)

	// (PATCH /carts/users/{userId}/items/{productId})
	CartsServiceUpdateItem(w http.ResponseWriter, r *http.Request, userId Uuid, productId Uuid)

	// (GET /categories)
	CategoriesServiceList(w http.ResponseWriter, r *http.Request)

	// (POST /categories)
	CategoriesServiceCreate(w http.ResponseWriter, r *http.Request)

	// (GET /categories/tree)
	CategoriesServiceTree(w http.ResponseWriter, r *http.Request)

	// (DELETE /categories/{categoryId})
	CategoriesServiceDelete(w http.ResponseWriter, r *http.Request, categoryId Uuid)

	// (GET /categories/{categoryId})
	CategoriesServiceGet(w http.ResponseWriter, r *http.Request, categoryId Uuid)

	// (PATCH /categories/{categoryId})
	CategoriesServiceUpdate(w http.ResponseWriter, r *http.Request, categoryId Uuid)

	// (GET /orders)
	OrdersServiceList(w http.ResponseWriter, r *http.Request, params OrdersServiceListParams)

	// (POST /orders/cancel/{orderId})
	OrdersServiceCancel(w http.ResponseWriter, r *http.Request, orderId Uuid)

	// (PATCH /orders/status/{orderId})
	OrdersServiceUpdateStatus(w http.ResponseWriter, r *http.Request, orderId Uuid)

	// (GET /orders/users/{userId})
	OrdersServiceListByUser(w http.ResponseWriter, r *http.Request, userId Uuid, params OrdersServiceListByUserParams)

	// (POST /orders/users/{userId})
	OrdersServiceCreate(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (GET /orders/{orderId})
	OrdersServiceGet(w http.ResponseWriter, r *http.Request, orderId Uuid)

	// (GET /products)
	ProductsServiceList(w http.ResponseWriter, r *http.Request, params ProductsServiceListParams)

	// (POST /products)
	ProductsServiceCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /products/{productId})
	ProductsServiceDelete(w http.ResponseWriter, r *http.Request, productId Uuid)

	// (GET /products/{productId})
	ProductsServiceGet(w http.ResponseWriter, r *http.Request, productId Uuid)

	// (PATCH /products/{productId})
	ProductsServiceUpdate(w http.ResponseWriter, r *http.Request, productId Uuid)

	// (GET /users)
	UsersServiceList(w http.ResponseWriter, r *http.Request, params UsersServiceListParams)

	// (POST /users)
	UsersServiceCreate(w http.ResponseWriter, r *http.Request)

	// (DELETE /users/{userId})
	UsersServiceDelete(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (GET /users/{userId})
	UsersServiceGet(w http.ResponseWriter, r *http.Request, userId Uuid)

	// (PATCH /users/{userId})
	UsersServiceUpdate(w http.ResponseWriter, r *http.Request, userId Uuid)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// CartsServiceGetByUser operation middleware
func (siw *ServerInterfaceWrapper) CartsServiceGetByUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CartsServiceGetByUser(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CartsServiceClear operation middleware
func (siw *ServerInterfaceWrapper) CartsServiceClear(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CartsServiceClear(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CartsServiceAddItem operation middleware
func (siw *ServerInterfaceWrapper) CartsServiceAddItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CartsServiceAddItem(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CartsServiceRemoveItem operation middleware
func (siw *ServerInterfaceWrapper) CartsServiceRemoveItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "productId" -------------
	var productId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CartsServiceRemoveItem(w, r, userId, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CartsServiceUpdateItem operation middleware
func (siw *ServerInterfaceWrapper) CartsServiceUpdateItem(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Path parameter "productId" -------------
	var productId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CartsServiceUpdateItem(w, r, userId, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceList operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceList(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceList(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceCreate operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceTree operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceTree(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceTree(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceDelete operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "categoryId" -------------
	var categoryId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "categoryId", r.PathValue("categoryId"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceDelete(w, r, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceGet operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "categoryId" -------------
	var categoryId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "categoryId", r.PathValue("categoryId"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceGet(w, r, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// CategoriesServiceUpdate operation middleware
func (siw *ServerInterfaceWrapper) CategoriesServiceUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "categoryId" -------------
	var categoryId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "categoryId", r.PathValue("categoryId"), &categoryId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.CategoriesServiceUpdate(w, r, categoryId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceList operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params OrdersServiceListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "status" -------------

	err = runtime.BindQueryParameter("form", false, false, "status", r.URL.Query(), &params.Status)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "status", Err: err})
		return
	}

	// ------------- Optional query parameter "userId" -------------

	err = runtime.BindQueryParameter("form", false, false, "userId", r.URL.Query(), &params.UserId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// ------------- Optional query parameter "startDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "startDate", r.URL.Query(), &params.StartDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "startDate", Err: err})
		return
	}

	// ------------- Optional query parameter "endDate" -------------

	err = runtime.BindQueryParameter("form", false, false, "endDate", r.URL.Query(), &params.EndDate)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "endDate", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceCancel operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceCancel(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceCancel(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceUpdateStatus operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceUpdateStatus(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceUpdateStatus(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceListByUser operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceListByUser(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params OrdersServiceListByUserParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceListByUser(w, r, userId, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceCreate operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceCreate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceCreate(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// OrdersServiceGet operation middleware
func (siw *ServerInterfaceWrapper) OrdersServiceGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "orderId" -------------
	var orderId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "orderId", r.PathValue("orderId"), &orderId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "orderId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.OrdersServiceGet(w, r, orderId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProductsServiceList operation middleware
func (siw *ServerInterfaceWrapper) ProductsServiceList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params ProductsServiceListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	// ------------- Optional query parameter "name" -------------

	err = runtime.BindQueryParameter("form", false, false, "name", r.URL.Query(), &params.Name)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "name", Err: err})
		return
	}

	// ------------- Optional query parameter "categoryId" -------------

	err = runtime.BindQueryParameter("form", false, false, "categoryId", r.URL.Query(), &params.CategoryId)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "categoryId", Err: err})
		return
	}

	// ------------- Optional query parameter "minPrice" -------------

	err = runtime.BindQueryParameter("form", false, false, "minPrice", r.URL.Query(), &params.MinPrice)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "minPrice", Err: err})
		return
	}

	// ------------- Optional query parameter "maxPrice" -------------

	err = runtime.BindQueryParameter("form", false, false, "maxPrice", r.URL.Query(), &params.MaxPrice)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "maxPrice", Err: err})
		return
	}

	// ------------- Optional query parameter "sortBy" -------------

	err = runtime.BindQueryParameter("form", false, false, "sortBy", r.URL.Query(), &params.SortBy)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "sortBy", Err: err})
		return
	}

	// ------------- Optional query parameter "order" -------------

	err = runtime.BindQueryParameter("form", false, false, "order", r.URL.Query(), &params.Order)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "order", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProductsServiceList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProductsServiceCreate operation middleware
func (siw *ServerInterfaceWrapper) ProductsServiceCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProductsServiceCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProductsServiceDelete operation middleware
func (siw *ServerInterfaceWrapper) ProductsServiceDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProductsServiceDelete(w, r, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProductsServiceGet operation middleware
func (siw *ServerInterfaceWrapper) ProductsServiceGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProductsServiceGet(w, r, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// ProductsServiceUpdate operation middleware
func (siw *ServerInterfaceWrapper) ProductsServiceUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "productId" -------------
	var productId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "productId", r.PathValue("productId"), &productId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "productId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.ProductsServiceUpdate(w, r, productId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersServiceList operation middleware
func (siw *ServerInterfaceWrapper) UsersServiceList(w http.ResponseWriter, r *http.Request) {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params UsersServiceListParams

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", false, false, "limit", r.URL.Query(), &params.Limit)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "limit", Err: err})
		return
	}

	// ------------- Optional query parameter "offset" -------------

	err = runtime.BindQueryParameter("form", false, false, "offset", r.URL.Query(), &params.Offset)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "offset", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersServiceList(w, r, params)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersServiceCreate operation middleware
func (siw *ServerInterfaceWrapper) UsersServiceCreate(w http.ResponseWriter, r *http.Request) {

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersServiceCreate(w, r)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersServiceDelete operation middleware
func (siw *ServerInterfaceWrapper) UsersServiceDelete(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersServiceDelete(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersServiceGet operation middleware
func (siw *ServerInterfaceWrapper) UsersServiceGet(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersServiceGet(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

// UsersServiceUpdate operation middleware
func (siw *ServerInterfaceWrapper) UsersServiceUpdate(w http.ResponseWriter, r *http.Request) {

	var err error

	// ------------- Path parameter "userId" -------------
	var userId Uuid

	err = runtime.BindStyledParameterWithOptions("simple", "userId", r.PathValue("userId"), &userId, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationPath, Explode: false, Required: true})
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "userId", Err: err})
		return
	}

	handler := http.Handler(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.UsersServiceUpdate(w, r, userId)
	}))

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r)
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshalingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshalingParamError) Error() string {
	return fmt.Sprintf("Error unmarshaling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshalingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{})
}

// ServeMux is an abstraction of http.ServeMux.
type ServeMux interface {
	HandleFunc(pattern string, handler func(http.ResponseWriter, *http.Request))
	ServeHTTP(w http.ResponseWriter, r *http.Request)
}

type StdHTTPServerOptions struct {
	BaseURL          string
	BaseRouter       ServeMux
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, m ServeMux) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseRouter: m,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, m ServeMux, baseURL string) http.Handler {
	return HandlerWithOptions(si, StdHTTPServerOptions{
		BaseURL:    baseURL,
		BaseRouter: m,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options StdHTTPServerOptions) http.Handler {
	m := options.BaseRouter

	if m == nil {
		m = http.NewServeMux()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}

	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	m.HandleFunc("GET "+options.BaseURL+"/carts/users/{userId}", wrapper.CartsServiceGetByUser)
	m.HandleFunc("DELETE "+options.BaseURL+"/carts/users/{userId}/items", wrapper.CartsServiceClear)
	m.HandleFunc("POST "+options.BaseURL+"/carts/users/{userId}/items", wrapper.CartsServiceAddItem)
	m.HandleFunc("DELETE "+options.BaseURL+"/carts/users/{userId}/items/{productId}", wrapper.CartsServiceRemoveItem)
	m.HandleFunc("PATCH "+options.BaseURL+"/carts/users/{userId}/items/{productId}", wrapper.CartsServiceUpdateItem)
	m.HandleFunc("GET "+options.BaseURL+"/categories", wrapper.CategoriesServiceList)
	m.HandleFunc("POST "+options.BaseURL+"/categories", wrapper.CategoriesServiceCreate)
	m.HandleFunc("GET "+options.BaseURL+"/categories/tree", wrapper.CategoriesServiceTree)
	m.HandleFunc("DELETE "+options.BaseURL+"/categories/{categoryId}", wrapper.CategoriesServiceDelete)
	m.HandleFunc("GET "+options.BaseURL+"/categories/{categoryId}", wrapper.CategoriesServiceGet)
	m.HandleFunc("PATCH "+options.BaseURL+"/categories/{categoryId}", wrapper.CategoriesServiceUpdate)
	m.HandleFunc("GET "+options.BaseURL+"/orders", wrapper.OrdersServiceList)
	m.HandleFunc("POST "+options.BaseURL+"/orders/cancel/{orderId}", wrapper.OrdersServiceCancel)
	m.HandleFunc("PATCH "+options.BaseURL+"/orders/status/{orderId}", wrapper.OrdersServiceUpdateStatus)
	m.HandleFunc("GET "+options.BaseURL+"/orders/users/{userId}", wrapper.OrdersServiceListByUser)
	m.HandleFunc("POST "+options.BaseURL+"/orders/users/{userId}", wrapper.OrdersServiceCreate)
	m.HandleFunc("GET "+options.BaseURL+"/orders/{orderId}", wrapper.OrdersServiceGet)
	m.HandleFunc("GET "+options.BaseURL+"/products", wrapper.ProductsServiceList)
	m.HandleFunc("POST "+options.BaseURL+"/products", wrapper.ProductsServiceCreate)
	m.HandleFunc("DELETE "+options.BaseURL+"/products/{productId}", wrapper.ProductsServiceDelete)
	m.HandleFunc("GET "+options.BaseURL+"/products/{productId}", wrapper.ProductsServiceGet)
	m.HandleFunc("PATCH "+options.BaseURL+"/products/{productId}", wrapper.ProductsServiceUpdate)
	m.HandleFunc("GET "+options.BaseURL+"/users", wrapper.UsersServiceList)
	m.HandleFunc("POST "+options.BaseURL+"/users", wrapper.UsersServiceCreate)
	m.HandleFunc("DELETE "+options.BaseURL+"/users/{userId}", wrapper.UsersServiceDelete)
	m.HandleFunc("GET "+options.BaseURL+"/users/{userId}", wrapper.UsersServiceGet)
	m.HandleFunc("PATCH "+options.BaseURL+"/users/{userId}", wrapper.UsersServiceUpdate)

	return m
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//xGty6SHWwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
