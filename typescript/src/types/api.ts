/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Login with email and password */
        post: operations["AuthService_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Logout (invalidate token) */
        post: operations["AuthService_logout"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get current user information */
        get: operations["AuthService_getCurrentUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get cart by user ID */
        get: operations["CartsService_getByUser"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/users/{userId}/items": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Add item to cart */
        post: operations["CartsService_addItem"];
        /** @description Clear all items from cart */
        delete: operations["CartsService_clear"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/carts/users/{userId}/items/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /** @description Remove item from cart */
        delete: operations["CartsService_removeItem"];
        options?: never;
        head?: never;
        /** @description Update cart item quantity */
        patch: operations["CartsService_updateItem"];
        trace?: never;
    };
    "/categories": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all categories */
        get: operations["CategoriesService_list"];
        put?: never;
        /** @description Create a new category (Admin only) */
        post: operations["CategoriesService_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/tree": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get category tree (with nested children) */
        get: operations["CategoriesService_tree"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/categories/{categoryId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a category by ID */
        get: operations["CategoriesService_get"];
        put?: never;
        post?: never;
        /** @description Delete a category (Admin only) */
        delete: operations["CategoriesService_delete"];
        options?: never;
        head?: never;
        /** @description Update a category (Admin only) */
        patch: operations["CategoriesService_update"];
        trace?: never;
    };
    "/orders": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all orders with optional filtering (Admin only) */
        get: operations["OrdersService_list"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/cancel/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** @description Cancel an order */
        post: operations["OrdersService_cancel"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/status/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /** @description Update order status (Admin only) */
        patch: operations["OrdersService_updateStatus"];
        trace?: never;
    };
    "/orders/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get orders by user ID */
        get: operations["OrdersService_listByUser"];
        put?: never;
        /** @description Create a new order from user's cart */
        post: operations["OrdersService_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/orders/{orderId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get an order by ID */
        get: operations["OrdersService_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all products with optional filtering */
        get: operations["ProductsService_list"];
        put?: never;
        /** @description Create a new product (Admin only) */
        post: operations["ProductsService_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/products/{productId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a product by ID */
        get: operations["ProductsService_get"];
        put?: never;
        post?: never;
        /** @description Delete a product (Admin only) */
        delete: operations["ProductsService_delete"];
        options?: never;
        head?: never;
        /** @description Update a product (Admin only) */
        patch: operations["ProductsService_update"];
        trace?: never;
    };
    "/users": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description List all users (Admin only) */
        get: operations["UsersService_list"];
        put?: never;
        /** @description Create a new user */
        post: operations["UsersService_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/users/{userId}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** @description Get a user by ID */
        get: operations["UsersService_get"];
        put?: never;
        post?: never;
        /** @description Delete a user */
        delete: operations["UsersService_delete"];
        options?: never;
        head?: never;
        /** @description Update a user */
        patch: operations["UsersService_update"];
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Add item to cart request */
        AddCartItemRequest: {
            productId: components["schemas"]["uuid"];
            /** Format: int32 */
            quantity: number;
        };
        /** @description User address */
        Address: {
            street: string;
            city: string;
            state: string;
            postalCode: string;
            country: string;
        };
        /** @description Authenticated user context */
        AuthUser: {
            id: components["schemas"]["uuid"];
            email: string;
            name: string;
        };
        /** @description Shopping cart */
        Cart: {
            id: components["schemas"]["uuid"];
            userId: components["schemas"]["uuid"];
            items: components["schemas"]["CartItem"][];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Cart item */
        CartItem: {
            productId: components["schemas"]["uuid"];
            /** Format: int32 */
            quantity: number;
            product?: components["schemas"]["Product"];
        };
        /** @description Cart summary with calculated totals */
        CartSummary: {
            /** Format: float */
            totalAmount: number;
            /** Format: int32 */
            totalItems: number;
        } & components["schemas"]["Cart"];
        /** @description Category model */
        Category: {
            id: components["schemas"]["uuid"];
            name: string;
            parentId?: components["schemas"]["uuid"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Category with nested children */
        CategoryTree: {
            children: components["schemas"]["CategoryTree"][];
        } & components["schemas"]["Category"];
        /** @description Category creation request */
        CreateCategoryRequest: {
            name: string;
            parentId?: components["schemas"]["uuid"];
        };
        /** @description Create order request */
        CreateOrderRequest: {
            items: components["schemas"]["OrderItem"][];
            shippingAddress: components["schemas"]["Address"];
        };
        /** @description Product creation request */
        CreateProductRequest: {
            name: string;
            description: string;
            /** Format: float */
            price: number;
            /** Format: int32 */
            stock: number;
            categoryId: components["schemas"]["uuid"];
            imageUrls?: string[];
        };
        /** @description User creation request */
        CreateUserRequest: {
            email: string;
            name: string;
            address?: components["schemas"]["Address"];
        };
        /**
         * @description Standard error codes used throughout the API
         * @enum {string}
         */
        ErrorCode: "BAD_REQUEST" | "UNAUTHORIZED" | "FORBIDDEN" | "NOT_FOUND" | "CONFLICT" | "VALIDATION_ERROR" | "INSUFFICIENT_STOCK" | "INVALID_STATE_TRANSITION" | "INTERNAL_ERROR" | "SERVICE_UNAVAILABLE";
        /** @description Common error response */
        ErrorResponse: {
            error: {
                code: components["schemas"]["ErrorCode"];
                message: string;
                details?: unknown;
            };
        };
        /** @description Login request */
        LoginRequest: {
            email: string;
            password: string;
        };
        /** @description Login response with access token */
        LoginResponse: {
            accessToken: string;
            /** @enum {string} */
            tokenType: "Bearer";
            /** Format: int32 */
            expiresIn: number;
            user: {
                id: components["schemas"]["uuid"];
                email: string;
                name: string;
            };
        };
        /** @description Simple OK response */
        OkResponse: {
            message: string;
        };
        /** @description Order model */
        Order: {
            id: components["schemas"]["uuid"];
            userId: components["schemas"]["uuid"];
            items: components["schemas"]["OrderItem"][];
            /** Format: float */
            totalAmount: number;
            status: components["schemas"]["OrderStatus"];
            shippingAddress: components["schemas"]["Address"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Order item */
        OrderItem: {
            productId: components["schemas"]["uuid"];
            /** Format: int32 */
            quantity: number;
            /** Format: float */
            price: number;
            productName: string;
        };
        /**
         * @description Order status enum
         * @enum {string}
         */
        OrderStatus: "pending" | "processing" | "shipped" | "delivered" | "cancelled";
        /** @description Product model */
        Product: {
            id: components["schemas"]["uuid"];
            name: string;
            description: string;
            /** Format: float */
            price: number;
            /** Format: int32 */
            stock: number;
            categoryId: components["schemas"]["uuid"];
            imageUrls: string[];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description Update cart item request */
        UpdateCartItemRequest: {
            /** Format: int32 */
            quantity: number;
        };
        /** @description Category update request */
        UpdateCategoryRequest: {
            name?: string;
            parentId?: components["schemas"]["uuid"];
        };
        /** @description Update order status request */
        UpdateOrderStatusRequest: {
            status: components["schemas"]["OrderStatus"];
        };
        /** @description Product update request */
        UpdateProductRequest: {
            name?: string;
            description?: string;
            /** Format: float */
            price?: number;
            /** Format: int32 */
            stock?: number;
            categoryId?: components["schemas"]["uuid"];
            imageUrls?: string[];
        };
        /** @description User update request */
        UpdateUserRequest: {
            email?: string;
            name?: string;
            address?: components["schemas"]["Address"];
        };
        /** @description User model */
        User: {
            id: components["schemas"]["uuid"];
            email: string;
            name: string;
            address?: components["schemas"]["Address"];
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            updatedAt: string;
        };
        /** @description UUID type alias */
        uuid: string;
    };
    responses: never;
    parameters: {
        /** @description End date for order creation */
        "OrderSearchParams.endDate": string;
        /** @description Start date for order creation */
        "OrderSearchParams.startDate": string;
        /** @description Filter by order status */
        "OrderSearchParams.status": components["schemas"]["OrderStatus"];
        /** @description Filter by user ID */
        "OrderSearchParams.userId": components["schemas"]["uuid"];
        /** @description Maximum number of items to return */
        "PaginationParams.limit": number;
        /** @description Number of items to skip */
        "PaginationParams.offset": number;
        /** @description Filter by category ID */
        "ProductSearchParams.categoryId": components["schemas"]["uuid"];
        /** @description Maximum price */
        "ProductSearchParams.maxPrice": number;
        /** @description Minimum price */
        "ProductSearchParams.minPrice": number;
        /** @description Search by product name */
        "ProductSearchParams.name": string;
        /** @description Sort order */
        "ProductSearchParams.order": "asc" | "desc";
        /** @description Sort field */
        "ProductSearchParams.sortBy": "name" | "price" | "createdAt";
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    AuthService_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    AuthService_logout: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["OkResponse"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    AuthService_getCurrentUser: {
        parameters: {
            query?: never;
            header: {
                Authorization: string;
            };
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["AuthUser"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CartsService_getByUser: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartSummary"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CartsService_addItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["AddCartItemRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartSummary"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CartsService_clear: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CartsService_removeItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
                productId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartSummary"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CartsService_updateItem: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
                productId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCartItemRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CartSummary"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CategoriesService_list: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"][] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CategoriesService_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateCategoryRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CategoriesService_tree: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["CategoryTree"][] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CategoriesService_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    CategoriesService_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    CategoriesService_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                categoryId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateCategoryRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Category"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Number of items to skip */
                offset?: components["parameters"]["PaginationParams.offset"];
                /** @description Filter by order status */
                status?: components["parameters"]["OrderSearchParams.status"];
                /** @description Filter by user ID */
                userId?: components["parameters"]["OrderSearchParams.userId"];
                /** @description Start date for order creation */
                startDate?: components["parameters"]["OrderSearchParams.startDate"];
                /** @description End date for order creation */
                endDate?: components["parameters"]["OrderSearchParams.endDate"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Order"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    } | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_cancel: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_updateStatus: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateOrderStatusRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_listByUser: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Number of items to skip */
                offset?: components["parameters"]["PaginationParams.offset"];
            };
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Order"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    } | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_create: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateOrderRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    OrdersService_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                orderId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Order"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    ProductsService_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Number of items to skip */
                offset?: components["parameters"]["PaginationParams.offset"];
                /** @description Search by product name */
                name?: components["parameters"]["ProductSearchParams.name"];
                /** @description Filter by category ID */
                categoryId?: components["parameters"]["ProductSearchParams.categoryId"];
                /** @description Minimum price */
                minPrice?: components["parameters"]["ProductSearchParams.minPrice"];
                /** @description Maximum price */
                maxPrice?: components["parameters"]["ProductSearchParams.maxPrice"];
                /** @description Sort field */
                sortBy?: components["parameters"]["ProductSearchParams.sortBy"];
                /** @description Sort order */
                order?: components["parameters"]["ProductSearchParams.order"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["Product"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    } | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    ProductsService_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateProductRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    ProductsService_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    ProductsService_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    ProductsService_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                productId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateProductRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Product"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    UsersService_list: {
        parameters: {
            query?: {
                /** @description Maximum number of items to return */
                limit?: components["parameters"]["PaginationParams.limit"];
                /** @description Number of items to skip */
                offset?: components["parameters"]["PaginationParams.offset"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        items: components["schemas"]["User"][];
                        /** Format: int32 */
                        total: number;
                        /** Format: int32 */
                        limit: number;
                        /** Format: int32 */
                        offset: number;
                    } | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    UsersService_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateUserRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    UsersService_get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    UsersService_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description There is no content to send for this request, but the headers may be useful.  */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    UsersService_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                userId: components["schemas"]["uuid"];
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateUserRequest"];
            };
        };
        responses: {
            /** @description The request has succeeded. */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["User"] | components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
}
