name: CI Check

on:
  push:
    branches:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  typespec-check:
    name: TypeSpec Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Setup Go for oapi-codegen
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Install oapi-codegen
        run: go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Compile TypeSpec
        run: pnpm compile:spec

      - name: Generate all code
        run: pnpm generate:all

      - name: Check for uncommitted changes
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "Error: Generated code is not up to date."
            git status --porcelain
            git diff
            exit 1
          fi

  typescript-check:
    name: TypeScript Build & Test with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'pnpm'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build TypeScript
        run: pnpm -F typescript build

      - name: Run TypeScript tests with coverage
        run: pnpm -F typescript test --coverage

      - name: Type check
        run: pnpm -F typescript exec tsc --noEmit

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: typescript-coverage
          path: typescript/coverage/

  go-check:
    name: Go Build & Test with Coverage
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'
          cache-dependency-path: go/go.sum

      - name: Install dependencies
        working-directory: ./go
        run: |
          go mod download
          go install github.com/oapi-codegen/oapi-codegen/v2/cmd/oapi-codegen@latest

      - name: Build Go code
        working-directory: ./go
        run: go build ./...

      - name: Run Go tests with coverage
        working-directory: ./go
        run: |
          go test -v -coverprofile=coverage.out ./...
          go tool cover -html=coverage.out -o coverage.html

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: go-coverage
          path: |
            go/coverage.out
            go/coverage.html

      - name: Check Go formatting
        working-directory: ./go
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "Error: Go code is not formatted."
            gofmt -d .
            exit 1
          fi

      - name: Run go vet
        working-directory: ./go
        run: go vet ./...

      - name: Run tests with race detector
        working-directory: ./go
        run: go test -race ./...